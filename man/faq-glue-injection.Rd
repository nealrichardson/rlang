% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/faq-nse.R
\name{faq-glue-injection}
\alias{faq-glue-injection}
\title{Embracing and injecting names with glue}
\description{
Argument names are normally defused constants, so you can't use
argument syntax to supply a variable name:\if{html}{\out{<div class="sourceCode r">}}\preformatted{var <- "foobar"
list(var = 1)
#> $var
#> [1] 1

# Need to assign the name in a separate step
set_names(list(1), var)
#> $foobar
#> [1] 1
}\if{html}{\out{</div>}}

In functions that support \link[=dyn-dots]{dynamic dots}, you can inject
names with \verb{!!} or with glue syntax. In these examples we use
\code{\link[=list2]{list2()}}, a variant of \code{list()} that supports glue injection
through dynamic dots. With glue syntax, you can interpolate a
string in a variable within a name.\if{html}{\out{<div class="sourceCode r">}}\preformatted{list2("\{var\}" := 1)
#> $foobar
#> [1] 1

list2("prefix_\{var\}_suffix" := 1)
#> $prefix_foobar_suffix
#> [1] 1
}\if{html}{\out{</div>}}
}
\section{What is the difference between \verb{\{} and \verb{\{\{}?}{


Whereas the glue \verb{\{} operator interpolates the contents of a
variable (either local objects or function arguments), the tidy
eval \verb{\{\{} operator interpolates a \link[=defusing]{defused} function
argument. You use botth \verb{\{} and \verb{\{\{} in name injection.\if{html}{\out{<div class="sourceCode r">}}\preformatted{fn <- function(arg) \{
  list2("\{\{ arg \}\}" := arg)
\}

fn(1)
#> $`1`
#> [1] 1
fn(1 + 1)
#> $`1 + 1`
#> [1] 2
}\if{html}{\out{</div>}}

The \verb{\{\{} syntax is mainly useful for interfacing with
\link[=faq-data-mask]{data-masking} functions, to give more informative
default names:\if{html}{\out{<div class="sourceCode r">}}\preformatted{fn <- function(data, var) \{
  dplyr::summarise(data, "mean_\{\{ var \}\}" := mean(\{\{ var \}\}))
\}

fn(mtcars, cyl)
#> # A tibble: 1 x 1
#>   mean_cyl
#>      <dbl>
#> 1     6.19

fn(mtcars, am)
#> # A tibble: 1 x 1
#>   mean_am
#>     <dbl>
#> 1   0.406
}\if{html}{\out{</div>}}

You'll likely find yourself to be quickly limited by this sort of
default names for single variables. In the following example the
default name is a bit awkward and there is no way for the user to
override it.\if{html}{\out{<div class="sourceCode r">}}\preformatted{fn(mtcars, am + cyl)
#> # A tibble: 1 x 1
#>   `mean_am + cyl`
#>             <dbl>
#> 1            6.59
}\if{html}{\out{</div>}}

This is functions that take multiple inputs with \code{...} are often
preferred because the user can override default names. If the dots
are \link[=dyn-dots]{dynamic}, they can also use glue syntax.
}

\section{Usage of \verb{\{\{} in wrong contexts}{


Nothing prevents \verb{\{\{} from working on regular objects. Ideally it
would only work with function arguments and this would be an error:\if{html}{\out{<div class="sourceCode r">}}\preformatted{var <- "foobar"
list2("\{\{ var \}\}" := 1)
#> $`"foobar"`
#> [1] 1
}\if{html}{\out{</div>}}

Unfortunately, for technical reasons we can't make it fail at the
moment. Instead the string \code{"foobar"} is taken as if it were a
defused expression and converted to a string. Notice the extra
quotes. The correct glue syntax for interpolating a variable
containing a string is single curly embracing:\if{html}{\out{<div class="sourceCode r">}}\preformatted{list2("\{var\}" := 1)
#> $foobar
#> [1] 1
}\if{html}{\out{</div>}}
}

